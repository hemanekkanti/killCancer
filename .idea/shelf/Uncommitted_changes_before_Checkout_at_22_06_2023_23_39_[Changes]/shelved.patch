Index: src/Particle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.Color;\nimport nano.*;\nimport java.util.List;\nimport java.util.Random;\n\nimport static java.lang.Math.abs;\n\npublic class Particle {\n    protected double radius;\n    private static final double ANIMATION_TIME = 30;\n    protected static Pen pen;\n    protected double x;\n    protected double y;\n    protected double dx;\n    protected double dy;\n    protected final static Random rand = new Random();\n    protected static double xSize;\n    protected static double ySize;\n    protected static double lowerEdge;\n    protected static double upperEdge;\n    protected boolean gravestone;\n    private Particle parent;\n    private int animationPhase;\n\n    private static List<? extends Particle> restrain;\n\n    public static void setRestrainList(List<? extends Particle> l) {restrain = l;}\n\n    public Particle(double radius) throws OutOfSpaceException {\n        this.radius = radius;\n        //this.colour = colour;\n        spawnParticle();\n        randomizeDirection();\n    }\n\n    public Particle(double radius, Particle parent) throws OutOfSpaceException {\n        this.radius = radius;\n        this.parent = parent;\n        //this.colour = colour;\n        spawnParticle();\n        randomizeDirection();\n    }\n    public static void setDimensions(double xsize, double ysize, double lowerEdge, double thickness) {\n        Particle.xSize = xsize;\n        Particle.ySize = ysize;\n        Particle.lowerEdge = lowerEdge;\n        Particle.upperEdge = lowerEdge+thickness;\n    }\n\n    public static void setPen(Pen pen) {\n        Particle.pen = pen;\n    }\n\n    public void move(){\n        randomizeDirection();\n        bounceScreen();\n        bounceVessel();\n        x += dx;\n        y += dy;\n    }\n\n    public void unmove(){\n        x -= dx;\n        y -= dy;\n    }\n\n    protected boolean isInsideVessel(){ return y > lowerEdge+radius && y < upperEdge-radius; }\n    private boolean onOuterEdge(){\n        return (onLowerEdge() || onUpperEdge());\n    }\n    private boolean onLowerEdge(){\n        return (y <= lowerEdge+radius && y >= lowerEdge-radius);\n    }\n    private boolean onUpperEdge(){\n        return (y >= upperEdge-radius && y <= upperEdge+radius);\n    }\n\n    public void bounceVessel() {\n        if(onOuterEdge() && !(this instanceof Cancer)){\n            dy = -dy;\n            if(onLowerEdge()) y=lowerEdge-radius;\n            else y=upperEdge+radius;\n        }\n    }\n\n    public void changeDirection(){\n        dx = -dx;\n        dy = -dy;\n    }\n\n\n    public void bounceScreen() {\n        if (x <= radius || x >= xSize-radius) {\n            dx = -dx;\n            if (x <= radius) x = radius;\n            else x = xSize-radius;\n        }\n        if (y <= radius || y >= ySize-radius) {\n            dy = -dy;\n            if (y <= radius) y = radius;\n            else y = ySize-radius;\n        }\n    }\n\n    protected void spawnParticle() throws OutOfSpaceException {\n        for (int tries = 0; tries<100; tries++) {\n            randomizePosition();\n            if (restrain.stream().noneMatch(this::isOverlapping) ) return;\n        }\n        throw new OutOfSpaceException(\"Particle could not be spawned without overlapping :'(\");\n    }\n\n    protected void randomizePosition() throws OutOfSpaceException {\n        if (parent == null) {\n            x = rand.nextDouble(radius, xSize - radius);\n            boolean chance = rand.nextBoolean();\n            y = chance ? rand.nextDouble(radius, lowerEdge - radius) : rand.nextDouble(upperEdge + radius, ySize - radius);\n        } else {\n            int i;\n            for (i = 0; i < 120; i++) {\n                double theta = rand.nextDouble(Math.PI * 2);\n                x = parent.x + Math.cos(theta) * (parent.radius + this.radius + 1);\n                y = parent.y + Math.sin(theta) * (parent.radius + this.radius + 1);\n                if (thatsMySPOT()) break;\n            }\n            if (i == 120) throw new OutOfSpaceException(\"Particle could not be spawned even before overlapping :'(\");\n        }\n    }\n\n    public boolean thatsMySPOT() {\n        if (x <= radius || x >= xSize-radius) return false;\n        if (y <= radius || y >= ySize-radius) return false;\n        if (isInsideVessel() || onOuterEdge()) return false;\n        return true;\n    }\n\n    protected void randomizeDirection() {\n        dx = rand.nextDouble(-2, 2);\n        dy = rand.nextDouble(-2, 2);\n    }\n\n    private double separationDistance(Particle p){\n        return Math.hypot((this.x-p.x),(this.y-p.y));\n    }\n\n    public boolean isOverlapping(Particle p){\n        if (p!=this) return separationDistance(p)<= radius + p.radius;\n        else return false;\n    }\n    public void draw(){\n        pen.drawCircle(XtoDraw(), YtoDraw(), radiusToDraw(),new Color(1f,1f,1f,0.5f), true);\n        animationProgress();\n    }\n    protected void animationProgress(){\n        if (animationPhase==-1) return;\n        if(++animationPhase >= ANIMATION_TIME) animationPhase = -1;\n    }\n    protected double getAnimationRatio(){\n        if (animationPhase==-1) return 1;\n        return (animationPhase/ANIMATION_TIME);\n    }\n    protected int radiusToDraw(){\n        return (int) (radius*getAnimationRatio());\n    }\n    protected int XtoDraw(){\n        if (animationPhase==-1 || parent==null) return (int) x;\n        return (int) (parent.x+(x-parent.x)*getAnimationRatio());\n    }\n    protected int YtoDraw(){\n        if (animationPhase==-1 || parent==null) return (int) y;\n        return (int) (parent.y+(y-parent.y)*getAnimationRatio());\n    }\n\n    public static class OutOfSpaceException extends Exception{\n        public OutOfSpaceException(String s) {\n        }\n    }\n\n    protected void killSelf() {gravestone=true;}\n    public boolean mustDie() {return gravestone;}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Particle.java b/src/Particle.java
--- a/src/Particle.java	(revision 76a364c954274fd22a64e88c27ef4466de3ad058)
+++ b/src/Particle.java	(date 1687469800772)
@@ -3,8 +3,6 @@
 import java.util.List;
 import java.util.Random;
 
-import static java.lang.Math.abs;
-
 public class Particle {
     protected double radius;
     private static final double ANIMATION_TIME = 30;
Index: src/Simulation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import nano.Canvas;\nimport nano.Pen;\nimport java.awt.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Random;\npublic class Simulation {\n    public Simulation() {\n        int xSize = 1000;\n        int ySize = 700;\n        Canvas screen = new Canvas(xSize, ySize, 150, 50);\n        Pen pen = new Pen(screen);\n        Random rand = new Random();\n\n        double radius = 15;\n        int ncells = 20;\n        int ncancer = 1;\n        int ndrugs = 0;\n        int chemoInjectionQuant = 5000;\n        double thickness = 150;\n        double lowerEdge = (ySize-thickness)/2 ;\n\n        //setting the static variables\n        Particle.setDimensions(xSize,ySize, lowerEdge, thickness);\n        Particle.setPen(pen);\n        BloodVessel bloodstream = new BloodVessel(pen);\n        BloodVessel.setDimensions(thickness, lowerEdge, xSize);\n\n        //making the lists\n        List<Cell> cells = new ArrayList<>(ncells + ncancer);\n        List<Cell> newCells = new ArrayList<>();\n        List<Chemo> drugs = new ArrayList<>(chemoInjectionQuant);\n\n        //setting the static lists\n        Cell.setNewCellList(newCells);\n        Particle.setRestrainList(cells);\n        Chemo.setDrugsList(drugs);\n\n\n        int t = 0;\n\n        try {\n            for (int i = 0; i < ncells; i++) cells.add(new Cell(radius));\n            for (int i = 0; i < ncancer; i++) cells.add(new Cancer(radius));\n        } catch (Particle.OutOfSpaceException s) {\n            throw new RuntimeException(s);\n        }\n\n        int flowrate=0;\n\n        while(true) {\n            //drawBloodvessel\n            bloodstream.draw();\n            bloodstream.flow(flowrate);\n\n            //move cells all the while bouncing them properly within the space\n            newCells.clear();\n            boolean phaseTick = t % 5 == 0;\n            cells.forEach(c -> {\n                        c.move();\n                        int i = 0;\n                        while (cells.stream().anyMatch(c::isOverlapping)) {\n                            c.unmove();\n                            if (i++ > 20) break;\n                            c.move();\n                        }\n                        if (phaseTick) c.changePhase();\n                        c.draw();\n                    });\n            cells.addAll(newCells);\n            cells.removeIf(Cell::mustDie);\n\n            ncancer = (int) cells.stream().filter(c->c instanceof Cancer).count();\n            ncells = cells.size()-ncancer;\n            ndrugs = drugs.size();\n\n            //chemo dosage\n            if(ncancer>4 && ndrugs < 0.08 * chemoInjectionQuant) Chemo.injectDrugs(chemoInjectionQuant);\n            drugs.forEach(chemo -> {\n                chemo.move();\n                //cells.stream().filter(Cell::vulnerableToChemo).filter(chemo::isOverlapping).forEach(Cell::killSelf);\n                cells.stream().filter(Cell::vulnerableToChemo).filter(chemo::isOverlapping).findAny().ifPresent( c -> {\n                    c.killSelf();\n                    chemo.killSelf();\n                });\n                chemo.draw();\n            });\n            drugs.removeIf(Chemo::mustDie);\n            pen.drawString(5, 5, Color.WHITE, \"cell count:\"+cells.size());\n\n            screen.update();\n            screen.pause(10);\n            screen.clear();\n            t++;\n            if( flowrate ++ >= 250) flowrate = 0;\n        }\n    }\n\n\n    public static void main(String[] args) {\n        Simulation e = new Simulation();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Simulation.java b/src/Simulation.java
--- a/src/Simulation.java	(revision 76a364c954274fd22a64e88c27ef4466de3ad058)
+++ b/src/Simulation.java	(date 1687469911423)
@@ -16,8 +16,8 @@
         int ncells = 20;
         int ncancer = 1;
         int ndrugs = 0;
-        int chemoInjectionQuant = 5000;
-        double thickness = 150;
+        int chemoInjectionQuant = 200;
+        double thickness = 200;
         double lowerEdge = (ySize-thickness)/2 ;
 
         //setting the static variables
